import { <%= name.toUpperCase() %>_FEATURE_KEY, <%= classify(name) %>Entity } from '<%= apiPath %>/<%= dasherize(name) %>';

import { createEntityAdapter, EntityAdapter, EntityState } from '@ngrx/entity';
import { Action, createReducer, on } from '@ngrx/store';

import * as <%= camelize(name) %>Actions from './<%= dasherize(name) %>.actions';

export interface <%= classify(name) %>State extends EntityState<<%= classify(name) %>Entity> {            // State elkészül itt: ids: és entities: property-k azok eleve elkszünek az EntityState-ben. Itt benne, ezekkel nekem már nem kell foglalkozni!!!
    isNewEntityButtonEnabled: boolean;
    selectedId?: string;
    loading: boolean;
    error?: string | null;
}

export interface <%= classify(name) %>PartialState {                 // service.impl-ben adom meg hogy tt -->
    readonly [<%= name.toUpperCase() %>_FEATURE_KEY]: <%= classify(name) %>State;
}

export const <%= camelize(name) %>Adapter: EntityAdapter<<%= classify(name) %>Entity> =
    createEntityAdapter<<%= classify(name) %>Entity>({
        selectId: (model: <%= classify(name) %>Entity) => model.id,      // itt adhatom meg, hogy az érkező Entity-knek mi legyen az elsődleges kulcsa, amit használok a Stateben
    });

export const initialState: <%= classify(name) %>State = <%= camelize(name) %>Adapter.getInitialState({        // <%= camelize(name) %>Adapter segítségével készítúnk egy initialState-t. Ez megjelenik amúgy az authentication.reducer.ts-ben is
    isNewEntityButtonEnabled: true,                                 // Ekkor készül el maga a Reducer, és ezel az Obj.al: initialState fogja inicializálni az adott State állapotát
    loading: false,
});

const <%= camelize(name) %>Reducer = createReducer(
    initialState,
    on(<%= camelize(name) %>Actions.add<%= classify(name) %>, (state) => ({                       // Ezek a fgv.el / on() / a különböző Action-okra Hookolnak rá, azaz lefuttatnak egy logikát, amivel én be tudom updatelni a state-t
        ...state,
        loading: false,
        error: null,
    })),
    on(<%= camelize(name) %>Actions.add<%= classify(name) %>Success, (state, { <%= camelize(name) %> }) =>
        <%= camelize(name) %>Adapter.addOne(<%= camelize(name) %>, { ...state, loading: true })       // az NgRx Entity abban segít pl. hogy a <%= camelize(name) %>Adapteren keresztül olyan metódusokat biztosít, amivel nagyon könnyen be tudom módosítani az Entity State-t    
    ),
    on(<%= camelize(name) %>Actions.add<%= classify(name) %>Fail, (state, { error }) => ({ ...state, error })),
    on(<%= camelize(name) %>Actions.changeNewEntityButtonEnabled, (state, { enabled }) => ({
        ...state,
        isNewEntityButtonEnabled: enabled,
    })),
    on(<%= camelize(name) %>Actions.get<%= classify(name) %>, (state) => ({
        ...state,
        loading: false,
        error: null,
    })),
    on(<%= camelize(name) %>Actions.get<%= classify(name) %>Success, (state, { <%= camelize(name) %> }) => {
        if (<%= camelize(name) %>) {
            return <%= camelize(name) %>Adapter.upsertOne(<%= camelize(name) %>, { ...state, loading: false });
        } else {
            return state;
        }
    }),
    on(<%= camelize(name) %>Actions.get<%= classify(name) %>Fail, (state, { error }) => ({ ...state, error })),
    on(<%= camelize(name) %>Actions.list<%= classify(name) %>s, (state) => ({
        ...state,
        loading: false,
        error: null,
    })),
    on(<%= camelize(name) %>Actions.list<%= classify(name) %>sSuccess, (state, { <%= camelize(name) %>s }) =>
        <%= camelize(name) %>Adapter.upsertMany(<%= camelize(name) %>s, { ...state, loading: true })
    ),
    on(<%= camelize(name) %>Actions.list<%= classify(name) %>sFail, (state, { error }) => ({ ...state, error })),
    on(<%= camelize(name) %>Actions.update<%= classify(name) %>Success, (state, { <%= camelize(name) %> }) =>
        <%= camelize(name) %>Adapter.updateOne(<%= camelize(name) %>, state)
    ),
    on(<%= camelize(name) %>Actions.update<%= classify(name) %>Fail, (state, { error }) => ({ ...state, error }))
);

export function reducer(state: <%= classify(name) %>State | undefined, action: Action) {
    return <%= camelize(name) %>Reducer(state, action);
}
