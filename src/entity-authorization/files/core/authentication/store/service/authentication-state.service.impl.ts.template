import { Observable, of } from 'rxjs';                                                                // of() Creation operátor Observable-t készít;; emittál érétket
import {
  AuthenticationStateService,
  LoginModel,
  RegistrationModel,
} from '<%= apiPath %>/authentication';
import { <%= classify(name) %>Entity } from '<%= apiPath %>/<%= dasherize(name) %>';

import { Injectable } from '@angular/core';
import { select, Store } from '@ngrx/store';

import * as authenticationActions from '../state/authentication.action';
import { AuthenticationPartialState } from '../state/authentication.reducer';
import * as authenticationSelectors from '../state/authentication.selectors';

@Injectable()
export class AuthenticationStateServiceImpl extends AuthenticationStateService {
  public constructor(private store: Store<AuthenticationPartialState>) {
    super();                                                                  
  }

  public dispatchLogin(<%= camelize(name) %>: <%= classify(name) %>Entity): void {
    this.store.dispatch(authenticationActions.login({ <%= camelize(name) %> }));
  }

  public dispatchRegistrationAction(
    registrationModel: RegistrationModel
  ): void {
    this.store.dispatch(authenticationActions.register({ registrationModel }));
  }

  public isLoggedIn$(): Observable<boolean> {
    return this.store.pipe(select(authenticationSelectors.isAuthenticated));
  }

  public selectAuthenticated<%= classify(name) %>$(): Observable<<%= classify(name) %>Entity | null> {
    return this.store.pipe(
      select(authenticationSelectors.selectAuthenticated<%= classify(name) %>)
    );
  }
}
