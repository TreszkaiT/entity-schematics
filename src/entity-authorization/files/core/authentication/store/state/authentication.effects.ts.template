import { of } from 'rxjs';
import { catchError, map, switchMap } from 'rxjs/operators';
import { AuthenticationDataService } from '<%= apiPath %>/authentication';

import { Injectable } from '@angular/core';
import { Actions, createEffect, ofType } from '@ngrx/effects';

import * as authenticationActions from './authentication.action';
import { RoleDataService, RoleEntity } from '<%= apiPath %>/role';
import { <%= classify(name) %>Entity } from '<%= apiPath %>/<%= dasherize(name) %>';
import { AuthorizationService } from '<%= apiPath %>/authorization';
import { Router } from '@angular/router';

@Injectable()
export class AuthenticationEffects {
  public login = createEffect(() =>
    this.actions$.pipe(
      ofType(authenticationActions.login),
      switchMap((action) => {
        return this.authenticationDataService.login$(action.<%= camelize(name) %>).pipe(
          switchMap(<%= camelize(name) %> => {
            if (<%= camelize(name) %> && <%= camelize(name) %>.roleIds && <%= camelize(name) %>.roleIds.length > 0) {
              return this.roleDataService.listByIds$(<%= camelize(name) %>.roleIds).pipe(
                  switchMap((roles) => {
                      return of({
                        ...<%= camelize(name) %>,
                        roles
                      });
                  })
              );
            } else {
              return of(<%= camelize(name) %>);
            }
          }),
          map((<%= camelize(name) %>) => {
            if (!<%= camelize(name) %>) {
              throw new Error('This <%= camelize(name) %> is registrated yet.');
            }

            this.authorizationService.removeAll();
           
            if (<%= camelize(name) %>.roles) {
              this.authorizationService.addPermissionsByRoles(<%= camelize(name) %>.roles as RoleEntity[]);
            }

            this.router.navigate(['/']);

            return authenticationActions.loginSuccess({ <%= camelize(name) %> });
          })
        );
      }),
      catchError((error) => {
        return of(authenticationActions.loginFail({ error }));
      })
    )
  );
  public register = createEffect(() =>
    this.actions$.pipe(
      ofType(authenticationActions.register),
      switchMap((action) => {
        return this.authenticationDataService
          .register$(action.registrationModel)
          .pipe(map((model) => authenticationActions.registerSuccess()));
      }),
      catchError((err) =>
        of(authenticationActions.registerFail({ error: err.message }))
      )
    )
  );

  public constructor(
    private actions$: Actions,
    private authenticationDataService: AuthenticationDataService,
    private roleDataService: RoleDataService,
    private authorizationService: AuthorizationService,
    private router: Router,
  ) {}
}
