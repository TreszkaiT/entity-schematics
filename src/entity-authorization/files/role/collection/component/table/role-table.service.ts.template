import { first, merge, Observable, ReplaySubject, switchMap } from 'rxjs';
import {
    RoleEntity,
    RoleStateService,
    RoleTableParams,
} from '<%= apiPath %>/role';

import { Injectable } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';

@Injectable()
export class RoleTableService {
    private params!: RoleTableParams;
    private params$$: ReplaySubject<RoleTableParams>;

    public constructor(
        private activatedRoute: ActivatedRoute,
        private roleStateService: RoleStateService,
        private router: Router
    ) {
        this.params$$ = new ReplaySubject();
    }

    public editRole(role: RoleEntity): void {
        this.router.navigate(['../edit', role?.id], {
            relativeTo: this.activatedRoute,
        });
    }

    public init$(): Observable<RoleTableParams> {
        return merge(
            this.roleStateService.selectEntityList$().pipe(first())
        ).pipe(
            switchMap((roles) => {
                this.params = {
                    roles,
                };

                this.params$$.next(this.params);

                return this.params$$;
            })
        );
    }
}
