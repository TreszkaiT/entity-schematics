import { AUTHENTICATION_FEATURE_KEY } from '<%= apiPath %>/authentication';
import { <%= classify(name) %>Entity } from '<%= apiPath %>/<%= dasherize(name) %>';

import { createReducer, on } from '@ngrx/store';

import * as actions from './authentication.action';

export interface AuthenticationState {
  authenticated<%= classify(name) %>: <%= classify(name) %>Entity | null;
  error: string | null;
}

export const initialState: AuthenticationState = {
  authenticated<%= classify(name) %>: null,
  error: null,
};

export interface AuthenticationPartialState {
  readonly [AUTHENTICATION_FEATURE_KEY]: AuthenticationState;
}

export const authenticationReducer = createReducer(
  initialState,
  on(actions.registerSuccess, (state) => state),
  on(actions.registerFail, (state, { error }) => {
    return {
      ...state,
      error,
    };
  }),
  on(actions.loginSuccess, (state, { <%= camelize(name) %> }) => {
    return {
      ...state,
      authenticated<%= classify(name) %>: <%= camelize(name) %>,
    };
  }),
  on(actions.loginFail, (state, { error }) => {
    return {
      ...state,
      error,
    };
  })
);
