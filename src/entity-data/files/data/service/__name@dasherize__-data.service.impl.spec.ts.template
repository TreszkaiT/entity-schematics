import { <%= classify(name) %>Entity, <%= classify(name) %>EntityAdd } from '<%= apiPath %>/<%= dasherize(name) %>';

import {
    HttpClientTestingModule,
    HttpTestingController,
} from '@angular/common/http/testing';
import { TestBed } from '@angular/core/testing';

import { <%= classify(name) %>DataServiceImpl } from './<%= dasherize(name) %>-data.service.impl';

describe('<%= classify(name) %>DataServiceImpl', () => {
    let service: <%= classify(name) %>DataServiceImpl;
    let httpMock: HttpTestingController;

    beforeEach(() => {
        TestBed.configureTestingModule({
            imports: [HttpClientTestingModule],
            providers: [<%= classify(name) %>DataServiceImpl],
        });

        service = TestBed.inject(<%= classify(name) %>DataServiceImpl);
        httpMock = TestBed.get(HttpTestingController);
    });

    it('should be created', () => {
        expect(service).toBeTruthy();
    });

    it('be able to retrieve config from the API via GET', () => {
        const mock<%= classify(name) %>: <%= classify(name) %>Entity = {
            id: '1',
        };

        service.get$('1').subscribe((config) => {
            expect(config).toEqual(mock<%= classify(name) %>);
        });

        const request = httpMock.expectOne(`${service.<%= camelize(name) %>Url}/1`);

        expect(request.request.method).toBe('GET');

        request.flush(mock<%= classify(name) %>);
    });
});
