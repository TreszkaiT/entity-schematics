import { combineLatest, Observable, ReplaySubject } from 'rxjs';
import { switchMap } from 'rxjs/operators';
import {
    <%= classify(name) %>Entity,
    <%= classify(name) %>EntityAdd,
    <%= classify(name) %>EntityUpdate,
    <%= classify(name) %>FormParams,
    <%= classify(name) %>StoreService,
    <%= classify(name) %>UtilService,
} from '<%= apiPath %>/<%= dasherize(name) %>';

import { Injectable } from '@angular/core';
import { FormGroup } from '@angular/forms';
import { ActivatedRoute, Router } from '@angular/router';

@Injectable()
export class <%= classify(name) %>FormService {
    private formGroup!: FormGroup;
    private params!: <%= classify(name) %>FormParams;
    private params$$: ReplaySubject<<%= classify(name) %>FormParams>;
    private <%= camelize(name) %>!: <%= classify(name) %>Entity | undefined;

    public constructor(
        private activatedRoute: ActivatedRoute,
        private <%= camelize(name) %>StoreService: <%= classify(name) %>StoreService,
        private <%= camelize(name) %>UtilService: <%= classify(name) %>UtilService,

        private router: Router
    ) {
        this.params$$ = new ReplaySubject();
    }

    public cancel(): void {
        this.router.navigate(['../../list'], {
            relativeTo: this.activatedRoute,
        });
    }

    public init$(): Observable<<%= classify(name) %>FormParams> {  // a logika, mely a <%= classify(name) %>-t dropdown menüben betölti a <%= classify(name) %>-hez
        return this.activatedRoute.params.pipe(
            switchMap((data) =>
                combineLatest([
                    this.<%= camelize(name) %>StoreService.selectEntity$(data['<%= camelize(name) %>Id']),                    
                ])
            ),
            switchMap(([<%= camelize(name) %>]) => {
                this.<%= camelize(name) %> = <%= camelize(name) %>;
                this.formGroup = this.<%= camelize(name) %>UtilService.createFormGroup(<%= camelize(name) %>);
                this.params = this.create<%= classify(name) %>Params(this.formGroup);

                this.params$$.next(this.params);

                return this.params$$;
            })
        );
    }

    public mainImageUpload(file: File): void {
        console.log(file);
    }

    public submit(): void {                     // ha a Submit-ra kattintok, akkor
        if (this.<%= camelize(name) %>) {                        // ha van már ilyen <%= classify(name) %>, akkor
            this.update<%= classify(name) %>();                  // updatelem
        } else {
            this.add<%= classify(name) %>();                     // amúgy meg létrehozom
        }

        this.router.navigate(['../../list'], {
            relativeTo: this.activatedRoute,
        });
    }

    private add<%= classify(name) %>(): void {       // a <%= camelize(name) %>UtilService-el készít nekünk egy új <%= classify(name) %>t
        const <%= camelize(name) %>: <%= classify(name) %>EntityAdd = this.<%= camelize(name) %>UtilService.createEntity(       // itt a util/service/ -ben van
            this.params.formGroup
        );

        this.<%= camelize(name) %>StoreService.dispatchAddEntityAction(<%= camelize(name) %>);
    }

    private create<%= classify(name) %>Params(formGroup: FormGroup): <%= classify(name) %>FormParams {
        const <%= camelize(name) %>FormParams: <%= classify(name) %>FormParams = {
            formGroup,
        };

        return <%= camelize(name) %>FormParams;
    }

    private update<%= classify(name) %>(): void {       // a <%= camelize(name) %>UtilService-el készít nekünk egy létező <%= classify(name) %>t, amit majd be tudunk updatelni
        const <%= camelize(name) %>: <%= classify(name) %>EntityUpdate = this.<%= camelize(name) %>UtilService.updateEntity(       // itt a util/service/ -ben van
            this.params.formGroup
        );

        this.<%= camelize(name) %>StoreService.dispatchUpdateEntityAction(<%= camelize(name) %>);
    }
}
