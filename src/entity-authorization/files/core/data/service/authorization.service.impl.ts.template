import {
    NgxPermissionsObject,
    NgxPermissionsService,
    NgxRolesObject,
    NgxRolesService,
} from 'ngx-permissions';
import { AuthorizationService } from '<%= apiPath %>/authorization';
import { ActionEnum } from '<%= apiPath %>/permission/action.enum';
import { ResourceEnum } from '<%= apiPath %>/permission/resource.enum';
import { RoleEntity } from '<%= apiPath %>/role';

import { Injectable } from '@angular/core';

@Injectable()
export class AuthorizationServiceImpl extends AuthorizationService {    // Ez tölti fel adattal az NgxPermission beépített alap logikáját a mi logikánkkal
    public constructor(
        private permissionsService: NgxPermissionsService,              // ezen a két Service-n keresztül tudjuk feldekorálni a Permission logikát alkalmazás szintjén
        private rolesService: NgxRolesService
    ) {
        super();
    }

    public addPermission(permission: string): void {
        this.permissionsService.addPermission(permission);
    }

    public addPermissionsByRole(role: RoleEntity): void {
        role.permissions?.forEach((permission) =>
            this.addPermission(permission)
        );
    }

    public addPermissionsByRoles(roles: RoleEntity[]): void {
        roles.forEach((role) => this.addPermissionsByRole(role));
    }

    public addRole(role: RoleEntity): void {
        this.rolesService.addRole(role.name || '', role.permissions || []);
    }

    public addRoles(roles: RoleEntity[]): void {
        roles.forEach((role) => {
            this.addRole(role);

            this.addPermissionsByRole(role);
        });
    }

    public generatePermissionName(
        action: ActionEnum,
        resource: ResourceEnum
    ): string {
        return `${action}${resource}`;
    }

    public hasPermission(permissionName: string): boolean {
        const permissions: NgxPermissionsObject =
            this.permissionsService.getPermissions();

        return !!Object.keys(permissions).find((key) => key === permissionName);
    }

    public hasRole(roleName: string): boolean {
        const roles: NgxRolesObject = this.rolesService.getRoles();

        return !!Object.keys(roles).find((key) => key === roleName);
    }

    public removeAll(): void {
        this.permissionsService.flushPermissions();
        this.rolesService.flushRoles();
    }
}
