import { RoleEntity, ROLE_FEATURE_KEY } from '<%= apiPath %>/role';

import { createEntityAdapter, EntityAdapter, EntityState } from '@ngrx/entity';
import { Action, createReducer, on } from '@ngrx/store';

import * as roleActions from './role.actions';

export interface State extends EntityState<RoleEntity> {
    isNewEntityButtonEnabled: boolean;
    selectedId?: string;
    selectedEntity: RoleEntity | null;
    loading: boolean;
    error?: string | null;
}

export interface RolePartialState {
    readonly [ROLE_FEATURE_KEY]: State;
}

export const roleAdapter: EntityAdapter<RoleEntity> =
    createEntityAdapter<RoleEntity>({
        selectId: (model: RoleEntity) => model.id,
    });

export const initialState: State = roleAdapter.getInitialState({
    isNewEntityButtonEnabled: true,
    loading: false,
    selectedEntity: null
});

const roleReducer = createReducer(
    initialState,
    on(roleActions.addRole, (state) => ({
        ...state,
        loading: false,
        error: null,
    })),
    on(roleActions.addRoleSuccess, (state, { role }) =>
        roleAdapter.addOne(role, { ...state, loading: true })
    ),
    on(roleActions.addRoleFail, (state, { error }) => ({ ...state, error })),
    on(roleActions.changeNewEntityButtonEnabled, (state, { enabled }) => ({
        ...state,
        isNewEntityButtonEnabled: enabled,
    })),
    on(roleActions.getRole, (state) => ({
        ...state,
        loading: false,
        error: null,
    })),
    on(roleActions.getRoleSuccess, (state, { role }) => {
        if (role) {
            return roleAdapter.upsertOne(role, { ...state, loading: false });
        } else {
            return state;
        }
    }),
    on(roleActions.getRoleFail, (state, { error }) => ({ ...state, error })),
    on(roleActions.listRoles, (state) => ({
        ...state,
        loading: false,
        error: null,
    })),
    on(roleActions.listRolesSuccess, (state, { roles }) =>
        roleAdapter. upsertMany(roles, { ...state, loading: true })
    ),
    on(roleActions.listRolesFail, (state, { error }) => ({ ...state, error })),
    on(roleActions.selectEntity, (state, { role }) => {
        return {
            ...state,
            selectedEntity: role
        }
    }),
    on(roleActions.updateRoleSuccess, (state, { role }) =>
        roleAdapter.updateOne(role, state)
    ),
    on(roleActions.updateRoleFail, (state, { error }) => ({ ...state, error }))
);

export function reducer(state: State | undefined, action: Action) {
    return roleReducer(state, action);
}
