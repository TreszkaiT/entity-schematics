import { first, merge, Observable, ReplaySubject, switchMap } from 'rxjs';
import {
    <%= classify(name) %>Entity,
    <%= classify(name) %>StoreService,
    <%= classify(name) %>TableParams,
} from '<%= apiPath %>/<%= dasherize(name) %>';

import { Injectable } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';

@Injectable()
export class <%= classify(name) %>TableService {
    private params!: <%= classify(name) %>TableParams;
    private params$$: ReplaySubject<<%= classify(name) %>TableParams>;

    public constructor(
        private activatedRoute: ActivatedRoute,
        private <%= camelize(name) %>StoreService: <%= classify(name) %>StoreService,
        private router: Router
    ) {
        this.params$$ = new ReplaySubject();
    }

    public edit<%= classify(name) %>(<%= camelize(name) %>: <%= classify(name) %>Entity): void {
        this.router.navigate(['../edit', <%= camelize(name) %>?.id], {
            relativeTo: this.activatedRoute,
        });
    }

    public init$(): Observable<<%= classify(name) %>TableParams> {
        
        // this.<%= camelize(name) %>StoreService.dispatchListEntitiesAction();
          
        return merge(
            this.<%= camelize(name) %>StoreService.selectEntityList$().pipe(first())
        ).pipe(
            switchMap((<%= camelize(name) %>s) => {
                this.params = {
                    //selectedEntity,
                    <%= camelize(name) %>s,
                };

                this.params$$.next(this.params);

                return this.params$$;
            })
        );
    }
}
